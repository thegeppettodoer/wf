!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("react"),require("dequal")):"function"==typeof define&&define.amd?define(["exports","react","dequal"],n):n((e=e||self).useworker={},e.react,e.dequal)}(this,function(e,n,r){n=n&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n,r=r&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r;var t=function(e){return function(n){return Promise.resolve(e.fn.apply(e,n.data[0])).then(function(n){var r,t="auto"===e.transferable&&(r=n,"ArrayBuffer"in self&&r instanceof ArrayBuffer||"MessagePort"in self&&r instanceof MessagePort||"ImageBitmap"in self&&r instanceof ImageBitmap||"OffscreenCanvas"in self&&r instanceof OffscreenCanvas)?[n]:[];postMessage(["SUCCESS",n],t)}).catch(function(e){postMessage(["ERROR",e])})}},a=function(e,n,r){var a="\n    "+function(e){return 0===e.length?"":"importScripts('"+e.map(function(e){return""+e}).toString()+"')"}(n)+";\n    onmessage=("+t+")({\n      fn: ("+e+"),\n      transferable: '"+r+"'\n    })\n  ",o=new Blob([a],{type:"text/javascript"});return URL.createObjectURL(o)};!function(e){e.PENDING="PENDING",e.SUCCESS="SUCCESS",e.RUNNING="RUNNING",e.ERROR="ERROR",e.TIMEOUT_EXPIRED="TIMEOUT_EXPIRED"}(e.WORKER_STATUS||(e.WORKER_STATUS={}));var o,u=e.WORKER_STATUS;!function(e){e.AUTO="auto",e.NONE="none"}(o||(o={}));var i={timeout:void 0,remoteDependencies:[],autoTerminate:!0,transferable:o.AUTO};e.useWorker=function(e,t){void 0===t&&(t=i);var c,s,f,l=n.useState(u.PENDING),d=l[0],m=l[1],v=n.useRef(),R=n.useRef(!1),p=n.useRef({}),E=n.useRef(),T=n.useCallback(function(e){R.current=e===u.RUNNING,m(e)},[]),O=n.useCallback(function(){var e;(null===(e=v.current)||void 0===e?void 0:e._url)&&(v.current.terminate(),URL.revokeObjectURL(v.current._url),p.current={},v.current=void 0,window.clearTimeout(E.current))},[]),w=n.useCallback(function(e){(null!=t.autoTerminate?t.autoTerminate:i.autoTerminate)&&O(),T(e)},[t.autoTerminate,O,T]),S=(c=function(){var n=t.remoteDependencies,r=t.timeout,o=void 0===r?i.timeout:r,c=t.transferable,s=a(e,void 0===n?i.remoteDependencies:n,void 0===c?i.transferable:c),f=new Worker(s);return f._url=s,f.onmessage=function(e){var n,r,t,a,o=e.data,i=o[1];switch(o[0]){case u.SUCCESS:null===(n=(r=p.current).resolve)||void 0===n||n.call(r,i),w(u.SUCCESS);break;default:null===(t=(a=p.current).reject)||void 0===t||t.call(a,i),w(u.ERROR)}},f.onerror=function(e){var n,r;null===(n=(r=p.current).reject)||void 0===n||n.call(r,e),w(u.ERROR)},o&&(E.current=window.setTimeout(function(){O(),T(u.TIMEOUT_EXPIRED)},o)),f},f=n.useRef(s=[e,t,O]),r(f.current,s)||(f.current=s),n.useCallback(c,f.current)),U=n.useCallback(function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var a=t,c=a.transferable,s=void 0===c?i.transferable:c;return new Promise(function(e,r){var t,a;p.current=((t={}).resolve=e,t.reject=r,t);var i=s===o.AUTO?n.filter(function(e){return"ArrayBuffer"in window&&e instanceof ArrayBuffer||"MessagePort"in window&&e instanceof MessagePort||"ImageBitmap"in window&&e instanceof ImageBitmap||"OffscreenCanvas"in window&&e instanceof OffscreenCanvas}):[];null===(a=v.current)||void 0===a||a.postMessage([[].concat(n)],i),T(u.RUNNING)})},[T]),b=n.useCallback(function(){var e=null!=t.autoTerminate?t.autoTerminate:i.autoTerminate;return R.current?(console.error("[useWorker] You can only run one instance of the worker at a time, if you want to run more than one in parallel, create another instance with the hook useWorker(). Read more: https://github.com/alewin/useWorker"),Promise.reject()):(!e&&v.current||(v.current=S()),U.apply(void 0,arguments))},[t.autoTerminate,S,U]),C={status:d,kill:O};return n.useEffect(function(){return function(){O()}},[O]),[b,C]}});
//# sourceMappingURL=index.umd.js.map
