{"version":3,"sources":["TextInputIcon.tsx"],"names":["React","View","StyleSheet","IconButton","ICON_SIZE","ICON_OFFSET","StyleContext","createContext","style","isTextInputFocused","forceFocus","IconAdornment","icon","topPosition","side","top","contextState","TextInputIcon","name","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","styles","container","iconButton","displayName","defaultProps","create","position","width","height","justifyContent","alignItems","margin"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAuD,cAAvD;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AAgBA,OAAO,MAAMC,SAAS,GAAG,EAAlB;AACP,MAAMC,WAAW,GAAG,EAApB;AAQA,MAAMC,YAAY,gBAAGN,KAAK,CAACO,aAAN,CAAsC;AACzDC,EAAAA,KAAK,EAAE,EADkD;AAEzDC,EAAAA,kBAAkB,EAAE,KAFqC;AAGzDC,EAAAA,UAAU,EAAE,MAAM,CAAE;AAHqC,CAAtC,CAArB;;AAMA,MAAMC,aAOL,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA,IAArB;AAA2BL,EAAAA,kBAA3B;AAA+CC,EAAAA;AAA/C,CAAD,KAAiE;AACnE,QAAMF,KAAK,GAAG;AACZO,IAAAA,GAAG,EAAEF,WADO;AAEZ,KAACC,IAAD,GAAQT;AAFI,GAAd;AAIA,QAAMW,YAAY,GAAG;AAAER,IAAAA,KAAF;AAASC,IAAAA,kBAAT;AAA6BC,IAAAA;AAA7B,GAArB;AAEA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEM;AAA9B,KAA6CJ,IAA7C,CADF;AAGD,CAjBD;;AAmBA,MAAMK,aAAa,GAAG,CAAC;AACrBC,EAAAA,IADqB;AAErBC,EAAAA,OAFqB;AAGrBC,EAAAA,mBAHqB;AAIrBC,EAAAA,KAJqB;AAKrB,KAAGC;AALkB,CAAD,KAMT;AACX,QAAM;AAAEd,IAAAA,KAAF;AAASC,IAAAA,kBAAT;AAA6BC,IAAAA;AAA7B,MAA4CV,KAAK,CAACuB,UAAN,CAChDjB,YADgD,CAAlD;AAIA,QAAMkB,uBAAuB,GAAGxB,KAAK,CAACyB,WAAN,CAAkB,MAAM;AACtD,QAAIL,mBAAmB,IAAI,CAACX,kBAA5B,EAAgD;AAC9CC,MAAAA,UAAU;AACX;;AACDS,IAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO;AACR,GAL+B,EAK7B,CAACC,mBAAD,EAAsBV,UAAtB,EAAkCD,kBAAlC,EAAsDU,OAAtD,CAL6B,CAAhC;AAOA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACO,MAAM,CAACC,SAAR,EAAmBnB,KAAnB;AAAb,kBACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAEU,IADR;AAEE,IAAA,KAAK,EAAEQ,MAAM,CAACE,UAFhB;AAGE,IAAA,IAAI,EAAExB,SAHR;AAIE,IAAA,OAAO,EAAEoB,uBAJX;AAKE,IAAA,KAAK,EAAE,OAAOH,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACZ,kBAAD,CAAnC,GAA0DY;AALnE,KAMMC,IANN,EADF,CADF;AAYD,CA9BD;;AA+BAL,aAAa,CAACY,WAAd,GAA4B,gBAA5B;AAEAZ,aAAa,CAACa,YAAd,GAA6B;AAC3BV,EAAAA,mBAAmB,EAAE;AADM,CAA7B;AAIA,MAAMM,MAAM,GAAGxB,UAAU,CAAC6B,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,QAAQ,EAAE,UADD;AAETC,IAAAA,KAAK,EAAE7B,SAFE;AAGT8B,IAAAA,MAAM,EAAE9B,SAHC;AAIT+B,IAAAA,cAAc,EAAE,QAJP;AAKTC,IAAAA,UAAU,EAAE;AALH,GADoB;AAQ/BR,EAAAA,UAAU,EAAE;AACVS,IAAAA,MAAM,EAAE;AADE;AARmB,CAAlB,CAAf;AAaA,eAAepB,aAAf,C,CAEA;;AACA,SAASN,aAAT","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\nimport type { IconSource } from '../../Icon';\n\ntype Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  name: IconSource;\n  onPress?: () => void;\n  forceTextInputFocus?: boolean;\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\nconst TextInputIcon = ({\n  name,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus } = React.useContext(\n    StyleContext\n  );\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        color={typeof color === 'function' ? color(isTextInputFocused) : color}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]}